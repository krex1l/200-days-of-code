import matplotlib.pyplot as plt
import numpy as np

class EquipmentFinancing:
    def __init__(self, amount, rate, months):
        self._amount = amount
        self._rate = rate / 12  # Monthly rate
        self._months = months
        self._paid = [0]  # Payments made
        self._outstanding = [amount]  # Outstanding balance
        self._legend = None
        
    def make_payment(self):
        payment = self._outstanding[-1] * self._rate / (1 - (1 + self._rate)**(-self._months + len(self._paid) - 1))
        self._paid.append(payment)
        principal = payment - self._outstanding[-1] * self._rate
        self._outstanding.append(self._outstanding[-1] - principal)
        
    def get_outstanding(self):
        return self._outstanding
        
    def get_legend(self):
        return self._legend

class FixedRateFinancing(EquipmentFinancing):
    def __init__(self, amount, rate, months):
        super().__init__(amount, rate, months)
        self._legend = f'Fixed, {rate*100:.1f}%'

class PointsFinancing(EquipmentFinancing):
    def __init__(self, amount, rate, months, points):
        super().__init__(amount, rate, months)
        self._points = points
        self._paid = [amount * (points/100)]
        self._outstanding = [amount - self._paid[0]]
        self._legend = f'Fixed, {rate*100:.1f}%, {points} points'

class TeaserRateFinancing(EquipmentFinancing):
    def __init__(self, amount, rate, months, teaser_rate, teaser_months):
        super().__init__(amount, teaser_rate, months)
        self._teaser_months = teaser_months
        self._teaser_rate = teaser_rate
        self._next_rate = rate / 12
        self._legend = f'{teaser_rate*100:.1f}% for {teaser_months} months, then {rate*100:.1f}%'
        
    def make_payment(self):
        if len(self._paid) == self._teaser_months + 1:
            self._rate = self._next_rate
            # Recalculate payment for remaining term
            remaining_months = self._months - self._teaser_months
            outstanding = self._outstanding[-1]
            self._paid[-1] = outstanding * self._rate / (1 - (1 + self._rate)**(-remaining_months))
        super().make_payment()

def compare_financing(amt, years, fixed_rate, pts, pts_rate, var_rate1, var_rate2, var_months):
    total_months = years * 12
    fixed1 = FixedRateFinancing(amt, fixed_rate, total_months)
    fixed2 = PointsFinancing(amt, pts_rate, total_months, pts)
    two_rate = TeaserRateFinancing(amt, var_rate2, total_months, var_rate1, var_months)
    financing_options = [fixed1, fixed2, two_rate]
    
    for m in range(total_months):
        for option in financing_options:
            option.make_payment()
    
    plot_financing(financing_options, amt)

def plot_financing(options, amt):
    plt.figure(figsize=(10, 6))
    for option in options:
        outstanding = option.get_outstanding()
        plt.plot(outstanding, label=option.get_legend())
    
    plt.title('Equipment Financing Options Comparison')
    plt.xlabel('Months')
    plt.ylabel('Outstanding Balance ($)')
    plt.legend()
    plt.grid(True)
    plt.show()

# Example usage
compare_financing(amt=100000, years=5, fixed_rate=0.06, pts=2, pts_rate=0.055, 
                 var_rate1=0.04, var_rate2=0.065, var_months=12)