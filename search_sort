import random
import time

# Generate random sensor data
sensor_data = [random.uniform(-50, 150) for _ in range(1000)]

# Linear Search
def linear_search(arr, target):
    for i, val in enumerate(arr):
        if val == target:
            return i
    return -1

# Binary Search
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

# Bubble Sort
def bubble_sort(arr):
    arr = arr.copy()
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

# Insertion Sort
def insertion_sort(arr):
    arr = arr.copy()
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

# Merge Sort
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    merged = []
    while left and right:
        merged.append(left.pop(0) if left[0] < right[0] else right.pop(0))
    merged.extend(left)
    merged.extend(right)
    return merged

# Quick Sort
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    left = [x for x in arr[1:] if x < pivot]
    mid = [pivot]
    right = [x for x in arr[1:] if x >= pivot]
    return quick_sort(left) + mid + quick_sort(right)

# Timing function
def time_algorithm(func, data, *args):
    start = time.time()
    result = func(data, *args) if args else func(data)
    end = time.time()
    return result, round(end - start, 5)

# Compare sort performances
algorithms = [bubble_sort, insertion_sort, merge_sort, quick_sort]
for algo in algorithms:
    _, duration = time_algorithm(algo, sensor_data)
    print(f"{algo.__name__}: {duration:.5f}s")

# Search example
sorted_data = sorted(sensor_data)
target = sorted_data[500]
_, t1 = time_algorithm(linear_search, sorted_data, target)
_, t2 = time_algorithm(binary_search, sorted_data, target)
print(f"Linear Search: {t1:.5f}s | Binary Search: {t2:.5f}s")